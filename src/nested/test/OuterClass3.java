package nested.test;

public class OuterClass3 {
    public void myMethod() {

        class LccalClass {
            public void hello() {
                System.out.println("Hello");
            }
        }

        LccalClass local = new LccalClass(); // 지역 클래스의 인스턴스 생성
        local.hello(); // 생성한 인스턴스를 통해 지역 클래스의 메서드 호출
    }

    /*
    바깥 클래스의 메서드 내부에서 **지역 클래스(Local Class)**의 인스턴스를 생성하는 이유는 바깥 클래스의 메서드 내에서 해당 지역 클래스에 접근하고, 그 클래스의 기능을 사용하기 위해서입니다.

    1.	**지역 클래스(Local Class)**는 메서드 내부에서 선언되기 때문에, 메서드 외부에서는 접근할 수 없습니다. 즉, 해당 지역 클래스는 그 메서드 내에서만 유효한 클래스입니다.
	2.	따라서, 바깥 클래스에서 지역 클래스에 접근하고 그 메서드를 호출하기 위해서는, 지역 클래스의 인스턴스를 메서드 내에서 생성해야 합니다. 그 인스턴스가 생성된 이후에야 해당 인스턴스를 통해 지역 클래스의 메서드(hello())를 호출할 수 있게 됩니다.
	3.	인스턴스를 생성하는 이유는 지역 클래스의 메서드를 실행하거나 지역 클래스 내에서 정의된 로직을 수행하기 위함입니다. 바깥 클래스에서 지역 클래스의 메서드나 속성에 접근하려면, 지역 클래스의 인스턴스를 명시적으로 생성해야만 가능합니다.

    public void myMethod() {

    class LccalClass {
        public void hello() {
            System.out.println("Hello");
        }
    }

    // 바깥 클래스의 메서드에서 지역 클래스의 인스턴스를 생성
    LccalClass local = new LccalClass();
    local.hello();  // 생성한 인스턴스를 통해 지역 클래스의 메서드 호출
    }

    여기서 new LccalClass()는 메서드 내부에서 지역 클래스의 인스턴스를 생성하는 구문이며, 이를 통해 local.hello()로 지역 클래스의 메서드를 호출하고 있습니다.

    요약:
        •	바깥 클래스의 메서드 내부에서 지역 클래스의 인스턴스를 생성하는 이유는, 바깥 클래스에서 해당 지역 클래스의 기능에 접근하기 위함입니다.
        •	지역 클래스는 해당 메서드 내에서만 유효하기 때문에, 해당 메서드 내에서만 인스턴스를 생성하고 사용할 수 있습니다.

     **지역 클래스(Local Class)**는 메서드 내부에서 선언되고, 해당 메서드 내에서만 인스턴스화될 수 있습니다. 지역 클래스는 메서드의 지역 변수처럼 특정 메서드의 실행 범위 내에서만 사용되는 클래스입니다. 따라서, 지역 클래스는 메서드 외부에서는 사용할 수 없고, 오직 메서드 내부에서만 생성되고 사용됩니다.

지역 클래스의 특징:

	1.	선언 범위: 지역 클래스는 특정 메서드 또는 블록 내에서 선언되며, 그 메서드나 블록이 실행될 때만 존재합니다. 메서드가 끝나면 해당 클래스와 그 인스턴스는 더 이상 사용할 수 없습니다.
	2.	생성 범위: 지역 클래스의 인스턴스는 메서드 내에서만 생성할 수 있습니다. 즉, 메서드 밖에서는 이 클래스를 인스턴스화하거나 호출할 수 없습니다.
	3.	바깥 클래스와의 관계:
	•	지역 클래스는 바깥 클래스의 인스턴스 멤버(필드, 메서드)에 접근할 수 있습니다.
	•	하지만, 메서드의 지역 변수에 접근하려면 그 지역 변수는 final 또는 사실상 final(변경되지 않는 값)이어야 합니다.

     * */
}
